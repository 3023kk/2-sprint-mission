# ┌──────────────────────────────────────────────────────────────
# │ 🔧 Environment Variables (상단에 한 번만 정의)
# └──────────────────────────────────────────────────────────────
@baseUrl = http://localhost:3000
@accessToken = 
@refreshToken = 
@articleId = 
@productId = 
@commentId = 

# ┌──────────────────────────────────────────────────────────────
# │ 1) 회원가입 → 토큰 발급
# └──────────────────────────────────────────────────────────────
### 회원가입 (Signup)  
POST {{baseUrl}}/users/signup
Content-Type: application/json

{
  "email": "rest@client.com",
  "nickname": "restTester",
  "password": "Test1234!"
}

> **Expected:** 201 Created  
> - body.user.email === "rest@client.com"  
> - body.tokens.accessToken, body.tokens.refreshToken 존재  
@accessToken = {{response.body.tokens.accessToken}}
@refreshToken = {{response.body.tokens.refreshToken}}

# ┌──────────────────────────────────────────────────────────────
# │ 2) 로그인 → 토큰 재발급
# └──────────────────────────────────────────────────────────────
### 로그인 (Login)  
POST {{baseUrl}}/users/login
Content-Type: application/json

{
  "email": "rest@client.com",
  "password": "Test1234!"
}

> **Expected:** 200 OK  
> - body.tokens.accessToken, body.tokens.refreshToken 존재  
@accessToken = {{response.body.tokens.accessToken}}
@refreshToken = {{response.body.tokens.refreshToken}}

# ┌──────────────────────────────────────────────────────────────
# │ 3) 내 정보 조회 / 수정 / 탈퇴 (Protected)
# └──────────────────────────────────────────────────────────────
### 내 정보 조회 (GET /users/me)  
GET {{baseUrl}}/users/me
Authorization: Bearer {{accessToken}}

> **Expected:** 200 OK, body.email === "rest@client.com"

### 내 정보 수정 (PUT /users/me)  
PUT {{baseUrl}}/users/me
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "nickname": "restTester2"
}

> **Expected:** 200 OK, body.nickname === "restTester2"

### 내 정보 탈퇴 (DELETE /users/me)  
DELETE {{baseUrl}}/users/me
Authorization: Bearer {{accessToken}}

> **Expected:** 204 No Content

# ┌──────────────────────────────────────────────────────────────
# │ 4) 상품 CRUD 테스트 (Products)
# └──────────────────────────────────────────────────────────────
### 4.1) 무토큰 상품 등록 → 401  
POST {{baseUrl}}/products
Content-Type: application/json

{
  "name": "Prod A",
  "price": 1000
}

> **Expected:** 401 Unauthorized

### 4.2) 상품 등록 → 201 & id 저장  
POST {{baseUrl}}/products
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "name": "Prod A",
  "price": 1000
}

> **Expected:** 201 Created, body.id 존재  
@productId = {{response.body.id}}

### 4.3) 상품 목록 조회 → 200 & 포함 여부 확인  
GET {{baseUrl}}/products?page=1&size=10

> **Expected:** 200 OK, products[] 중 id === {{productId}}

### 4.4) 상품 수정 → 200 & 필드 변경 확인  
PUT {{baseUrl}}/products/{{productId}}
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "price": 1500
}

> **Expected:** 200 OK, body.price === 1500

### 4.5) 상품 삭제 → 204  
DELETE {{baseUrl}}/products/{{productId}}
Authorization: Bearer {{accessToken}}

> **Expected:** 204 No Content

# ┌──────────────────────────────────────────────────────────────
# │ 5) 게시글 CRUD 테스트 (Articles)
# └──────────────────────────────────────────────────────────────
### 5.1) 무토큰 게시글 작성 → 401  
POST {{baseUrl}}/articles
Content-Type: application/json

{
  "title": "Hello",
  "content": "World"
}

> **Expected:** 401 Unauthorized

### 5.2) 게시글 작성 → 201 & id 저장  
POST {{baseUrl}}/articles
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "title": "Hello",
  "content": "World"
}

> **Expected:** 201 Created, body.id 존재  
@articleId = {{response.body.id}}

### 5.3) 게시글 수정 → 200 & title/content 변경  
PUT {{baseUrl}}/articles/{{articleId}}
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "title": "Updated Title",
  "content": "Updated Content"
}

> **Expected:** 200 OK, body.title/content 반영

### 5.4) 게시글 삭제 → 204  
DELETE {{baseUrl}}/articles/{{articleId}}
Authorization: Bearer {{accessToken}}

> **Expected:** 204 No Content

# ┌──────────────────────────────────────────────────────────────
# │ 6) 댓글 CRUD 테스트 (Comments)
# └──────────────────────────────────────────────────────────────
### 6.1) 댓글 대상 게시글 재생성  
POST {{baseUrl}}/articles
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "title": "For comment",
  "content": "..."
}

> **Expected:** 201, @articleId 갱신  
@articleId = {{response.body.id}}

### 6.2) 무토큰 댓글 작성 → 401  
POST {{baseUrl}}/articles/{{articleId}}/comments
Content-Type: application/json

{
  "text": "Nice!"
}

> **Expected:** 401 Unauthorized

### 6.3) 댓글 작성 → 201 & id 저장  
POST {{baseUrl}}/articles/{{articleId}}/comments
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "text": "Nice!"
}

> **Expected:** 201 Created, body.id 존재  
@commentId = {{response.body.id}}

### 6.4) 댓글 수정 → 200 & text 변경  
PUT {{baseUrl}}/comments/{{commentId}}
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "text": "Updated Nice!"
}

> **Expected:** 200 OK, body.text === "Updated Nice!"

### 6.5) 댓글 삭제 → 204  
DELETE {{baseUrl}}/comments/{{commentId}}
Authorization: Bearer {{accessToken}}

> **Expected:** 204 No Content
