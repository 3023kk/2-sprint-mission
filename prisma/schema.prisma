
generator client {
  provider = "prisma-client-js"
  // 1. "type": "module" 로 설정했으므로, ESM에 맞는 prisma client를 생성하도록 설정 추가
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 모델 추가
model Users {
  userId    Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 사용자와 상품의 관계 설정 (1:N)
  Products  Products[]
}

// 상품 모델 수정
model Products {
  productId   Int      @id @default(autoincrement())
  // 2. name -> title 로 변경
  title       String
  description String
  status      String   @default("FOR_SALE") // 판매 상태 필드 추가
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 3. 작성자(User)와의 관계 설정 추가
  authorId    Int
  // 사용자가 삭제되면, 관련 상품도 함께 삭제됩니다.
  Author      Users    @relation(fields: [authorId], references: [userId], onDelete: Cascade)
}

// 게시글 모델은 그대로 두어도 좋습니다.
// 하지만 일반적으로 게시글도 작성자가 있으므로, 아래와 같이 User와 연결하는 것이 좋습니다.
/*
model Article {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())

  // 작성자 정보 추가
  authorId  Int
  Author    Users    @relation(fields: [authorId], references: [userId], onDelete: Cascade)
}
*/